{
  "version": 3,
  "sources": ["../src/filter-cat.ts"],
  "sourcesContent": ["/**\n * Filter class for constructing and managing filters on a page.\n *\n * @author Takuto Yanagida\n * @version 2024-01-28\n *\n * @remarks\n * This class provides functionality to construct and manage filters on a page.\n * Filters can be applied to lists based on user-selected criteria.\n * @public\n */\n\ntype KeyToVals = Map<string, ['or'|'and', string[], string, string]>;\n\nexport default class FilterCat {\n\tstatic #idx: number = 0;\n\n\t/**\n\t * Constructs all filters on a page based on specified options.\n\t *\n\t * @param opts - Options for filter construction.\n\t */\n\tstatic constructAll(opts = {} as {[k in string]: string|boolean}) {\n\t\tconst selFilter = (typeof (opts['selFilter'] ?? null) === 'string') ? opts['selFilter'] as string : '.filter';\n\t\tconst selList   = (typeof (opts['selList']   ?? null) === 'string') ? opts['selList']   as string : '.list';\n\n\t\tconst fs = Array.from(document.querySelectorAll(`${selFilter}:not([for])`));\n\t\tconst ls = Array.from(document.querySelectorAll(`${selList}:not([id])`));\n\n\t\tfor (const f of fs) {\n\t\t\tconst l = ls.shift();\n\t\t\tif (!l) break;\n\n\t\t\tconst id = String(`fl${FilterCat.#idx++}`);\n\t\t\tf.setAttribute('for', String(id));\n\t\t\tl.setAttribute('id', String(id));\n\n\t\t\tnew FilterCat(id, opts);\n\t\t}\n\t}\n\n\t/**\n\t * Retrieves a non-empty value from the provided data map based on the given key.\n\t *\n\t * @private\n\t * @param arr - Data map (dataset).\n\t * @param key - Key to retrieve the value for.\n\t * @returns Non-empty value or null if not found.\n\t */\n\tstatic #nonEmpty(arr: DOMStringMap, key: string): string|null {\n\t\tconst v = arr[key] ?? '';\n\t\treturn v.length ? v : null;\n\t}\n\n\n\t// -------------------------------------------------------------------------\n\n\n\t#selFilter: string = '.filter';\n\t#selList  : string = '.list';\n\n\t#selFilterKey: string = '.filter-key';\n\n\t#selFilterSelect  : string =  '.filter-select';\n\t#selFilterEnabled : string =  '.filter-enabled';\n\t#selFilterRelation: string =  '.filter-relation';\n\t#selFilterValues  : string =  '.filter-values';\n\n\t#qvarBase  : string = '%key%';  // Base of query variable names ('%key%' is replaced by the key).\n\t#dsQvarBase: string = 'qvarBase';  // Make sure to convert it to a snake case when writing within a tag.\n\t#dsQvar    : string = 'qvar';\n\n\t#classBase  : string = '%value%';  // Base of value class names ('%key%' and '%value%' are replaced by the key and the value).\n\t#dsClassBase: string = 'classBase';  // Make sure to convert it to a snake case when writing within a tag.\n\n\t#dsKey  : string = 'key';    // For filters.\n\t#dsCount: string = 'count';  // For headings and lists\n\t#dsDepth: string = 'depth';  // For headings\n\n\t#doSetHeadingDepth       : boolean = true;\n\t#doInitializeByParams    : boolean = true;\n\t#doSupportDynamicAddition: boolean = true;\n\n\t#listElm: HTMLElement;\n\t#keyToUis: Map<string, [string, string, string, [HTMLInputElement, HTMLInputElement|null, HTMLInputElement[]|null]]> = new Map();\n\t#stopUpdate: boolean = false;\n\n\t/**\n\t * Represents a filtering mechanism for manipulating lists based on user-defined criteria.\n\t */\n\tconstructor(id: string, opts = {} as {[k in string]: string|boolean}) {\n\t\tthis.#assignOptions(opts);\n\n\t\tconst f = document.querySelector(`${this.#selFilter}[for=\"${id}\"]`) as HTMLElement;\n\t\tconst l = document.querySelector(`${this.#selList}#${id}`);\n\t\tif (!f || !l) {\n\t\t\tthrow new Error();\n\t\t}\n\n\t\tthis.#listElm = l as HTMLElement;\n\n\t\tthis.#initializeList();  // Initialize list first!\n\t\tthis.#initFilter(id, f);\n\n\t\tf.removeAttribute('hidden');\n\n\t\tif (this.#doSupportDynamicAddition) {\n\t\t\tconst mo = new MutationObserver(mrs => {\n\t\t\t\tfor (const mr of mrs) {\n\t\t\t\t\tif (mr.type === 'childList') {\n\t\t\t\t\t\tthis.#updateAt(mr.addedNodes[0] as Element);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t\tmo.observe(this.#listElm, { childList: true });\n\t\t}\n\t}\n\n\t/**\n\t * Assigns options to the Filter instance based on the provided options object.\n\t *\n\t * @private\n\t * @param opts - Options object containing key-value pairs for configuration.\n\t */\n\t#assignOptions(opts = {} as {[k in string]: string|boolean}) {\n\t\tif (typeof (opts['selFilter'] ?? null) === 'string') this.#selFilter = opts['selFilter'] as string;\n\t\tif (typeof (opts['selList']   ?? null) === 'string') this.#selList   = opts['selList']   as string;\n\n\t\tif (typeof (opts['selFilterKey'] ?? null) === 'string') this.#selFilterKey = opts['selFilterKey'] as string;\n\n\t\tif (typeof (opts['selFilterSelect']   ?? null) === 'string') this.#selFilterSelect   = opts['selFilterSelect']   as string;\n\t\tif (typeof (opts['selFilterEnabled']  ?? null) === 'string') this.#selFilterEnabled  = opts['selFilterEnabled']  as string;\n\t\tif (typeof (opts['selFilterRelation'] ?? null) === 'string') this.#selFilterRelation = opts['selFilterRelation'] as string;\n\t\tif (typeof (opts['selFilterValues']   ?? null) === 'string') this.#selFilterValues   = opts['selFilterValues']   as string;\n\n\t\tif (typeof (opts['qvarBase']   ?? null) === 'string') this.#qvarBase   = opts['qvarBase']   as string;\n\t\tif (typeof (opts['dsQvarBase'] ?? null) === 'string') this.#dsQvarBase = opts['dsQvarBase'] as string;\n\t\tif (typeof (opts['dsQvar']     ?? null) === 'string') this.#dsQvar     = opts['dsQvar']     as string;\n\n\t\tif (typeof (opts['classBase']   ?? null) === 'string') this.#classBase   = opts['classBase']   as string;\n\t\tif (typeof (opts['dsClassBase'] ?? null) === 'string') this.#dsClassBase = opts['dsClassBase'] as string;\n\n\t\tif (typeof (opts['dsKey']   ?? null) === 'string') this.#dsKey   = opts['dsKey']   as string;\n\t\tif (typeof (opts['dsCount'] ?? null) === 'string') this.#dsCount = opts['dsCount'] as string;\n\t\tif (typeof (opts['dsDepth'] ?? null) === 'string') this.#dsDepth = opts['dsDepth'] as string;\n\n\t\tif (typeof (opts['doSetHeadingDepth']    ?? null) === 'boolean') this.#doSetHeadingDepth    = opts['doSetHeadingDepth']    as boolean;\n\t\tif (typeof (opts['doInitializeByParams'] ?? null) === 'boolean') this.#doInitializeByParams = opts['doInitializeByParams'] as boolean;\n\t}\n\n\n\t// -------------------------------------------------------------------------\n\n\n\t/**\n\t * Initializes the filter based on the provided ID and filter element.\n\t *\n\t * @private\n\t * @param id - Filter ID.\n\t * @param filterElm - Filter element.\n\t */\n\t#initFilter(id: string, filterElm: HTMLElement): void {\n\t\tconst fkElms = Array.from(filterElm.querySelectorAll(this.#selFilterKey)) as HTMLElement[];\n\n\t\tthis.#assignAttributes(id, fkElms);\n\n\t\tconst qvarBase = FilterCat.#nonEmpty(filterElm.dataset, this.#dsQvarBase) ?? this.#qvarBase;\n\t\tconst rClsBase = FilterCat.#nonEmpty(filterElm.dataset, this.#dsClassBase) ?? this.#classBase;\n\n\t\tfor (const e of fkElms) {\n\t\t\tconst key  = e.dataset[this.#dsKey];\n\t\t\tif (!key) continue;\n\t\t\tconst qvar = FilterCat.#nonEmpty(e.dataset, this.#dsQvar) ?? qvarBase.replace('%key%', key);\n\t\t\tconst cls  = (FilterCat.#nonEmpty(e.dataset, this.#dsClassBase) ?? rClsBase).replace('%key%', key);\n\n\t\t\tconst sel = e.querySelector(this.#selFilterSelect) as HTMLInputElement;\n\t\t\tif (sel) {\n\t\t\t\tthis.#keyToUis.set(key, [cls, qvar, 'select', [sel, null, null]]);\n\t\t\t} else {\n\t\t\t\tconst ena = e.querySelector(this.#selFilterEnabled) as HTMLInputElement;\n\t\t\t\tconst rel = e.querySelector(this.#selFilterRelation) as HTMLInputElement;\n\t\t\t\tconst cbs = Array.from(e.querySelectorAll(this.#selFilterValues + ' input')) as HTMLInputElement[];\n\t\t\t\tthis.#keyToUis.set(key, [cls, qvar, 'checkbox', [ena, rel, cbs]]);\n\t\t\t}\n\t\t}\n\t\tfor (const [_key, [_cls, _qvar, type, es]] of this.#keyToUis) {\n\t\t\tthis.#assignEventListener(type, es);\n\t\t}\n\t\tif (this.#doInitializeByParams) {\n\t\t\tthis.#stopUpdate = true;\n\t\t\tthis.#getStateFromUrlParams();\n\t\t\tthis.#stopUpdate = false;\n\t\t}\n\t\tthis.#update();\n\t}\n\n\t/**\n\t * Assigns UI element attributes based on the filter ID and key elements.\n\t *\n\t * @private\n\t * @param id - Filter ID.\n\t * @param fkElms - Filter key elements.\n\t */\n\t#assignAttributes(id: string, fkElms: HTMLElement[]): void {\n\t\tfor (const fk of fkElms) {\n\t\t\tconst key = fk.dataset[this.#dsKey];\n\t\t\tif (!key) continue;\n\t\t\tsetIdFor(fk, this.#selFilterEnabled, key, 'enabled', id);\n\t\t\tsetIdFor(fk, this.#selFilterRelation, key, 'relation', id);\n\n\t\t\tconst s = fk.querySelector(this.#selFilterSelect) as HTMLInputElement;\n\t\t\tif (s) s.name = `select-${key}`;\n\t\t\tconst cbs = Array.from(fk.querySelectorAll(this.#selFilterValues + ' input')) as HTMLInputElement[];\n\t\t\tfor (const cb of cbs) cb.name = `${key}-${cb.value}`;\n\t\t}\n\n\t\tfunction setIdFor(fk: HTMLElement, sel: string, key: string, prefix: string, suffix: string): void {\n\t\t\tconst fe = fk.querySelector(sel);\n\t\t\tif (!fe) return;\n\n\t\t\tfe.id = `${prefix}-${key}-${suffix}`;\n\n\t\t\tlet e = fe;\n\t\t\twhile (e.nextElementSibling) {\n\t\t\t\te = e.nextElementSibling;\n\t\t\t\tif (e.tagName !== 'LABEL') break;\n\t\t\t\te.setAttribute('for', fe.id);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Updates the list based on the current filter criteria.\n\t *\n\t * @private\n\t */\n\t#update(): void {\n\t\tif (this.#stopUpdate) {\n\t\t\treturn;\n\t\t}\n\t\tconst keyToVals = this.#getKeyToVals();\n\n\t\tthis.#fixListHeight();\n\t\tthis.#filterLists(keyToVals);\n\t\tthis.#countUpItems();\n\t\tthis.#freeListHeight();\n\n\t\tthis.#setUrlParams(keyToVals);\n\t}\n\n\t/**\n\t * Updates the list based on the current filter criteria.\n\t *\n\t * @private\n\t * @param start - (Optional) Element that start updating.\n\t */\n\t#updateAt(start: Element|null = null): void {\n\t\tconst keyToVals = this.#getKeyToVals();\n\n\t\tthis.#initializeList(start);  // Initialize list first!\n\t\tthis.#filterLists(keyToVals, start);\n\t\tthis.#countUpItems(start);\n\t}\n\n\n\t// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\n\n\t/**\n\t * Assigns event listeners to UI elements based on the UI type and elements.\n\t *\n\t * @private\n\t * @param type - UI type (select or checkbox).\n\t * @param es - UI elements.\n\t */\n\t#assignEventListener(type: string, es: [HTMLInputElement, HTMLInputElement|null, HTMLInputElement[]|null]): void {\n\t\tif (type === 'select') {\n\t\t\tconst [sel] = es;\n\t\t\tsel.addEventListener('change', () => this.#update());\n\t\t} else if (type === 'checkbox') {\n\t\t\tconst [ena, rel, cbs] = es;\n\t\t\tif (ena && cbs) {\n\t\t\t\tena.addEventListener('click', () => {\n\t\t\t\t\tif (ena.checked && !this.#isCheckedAtLeastOne(cbs)) {\n\t\t\t\t\t\tfor (const cb of cbs) cb.checked = true;\n\t\t\t\t\t}\n\t\t\t\t\tif (!ena.checked && this.#isCheckedAll(cbs)) {\n\t\t\t\t\t\tfor (const cb of cbs) cb.checked = false;\n\t\t\t\t\t}\n\t\t\t\t\tthis.#update();\n\t\t\t\t});\n\t\t\t\tfor (const cb of cbs) {\n\t\t\t\t\tcb.addEventListener('click', () => {\n\t\t\t\t\t\tena.checked = this.#isCheckedAtLeastOne(cbs);\n\t\t\t\t\t\tthis.#update();\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (rel) {\n\t\t\t\trel.addEventListener('click', () => this.#update());\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Checks if at least one checkbox is checked among the provided checkboxes.\n\t *\n\t * @private\n\t * @param cbs - Checkboxes to check.\n\t * @returns Whether any checkbox is checked\n\t */\n\t#isCheckedAtLeastOne(cbs: HTMLInputElement[]): boolean {\n\t\tfor (const cb of cbs) {\n\t\t\tif (cb.checked) return true;\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t * Check if all checkboxes are checked.\n\t *\n\t * @private\n\t * @param cbs - Checkboxes to check.\n\t * @returns Whether all checkboxes are checked\n\t */\n\t#isCheckedAll(cbs: HTMLInputElement[]): boolean {\n\t\tfor (const cb of cbs) {\n\t\t\tif (!cb.checked) return false;\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Gets the key-to-values mapping based on the current state of filters.\n\t *\n\t * @private\n\t * @returns Key-to-values mapping representing the filter criteria.\n\t */\n\t#getKeyToVals(): KeyToVals {\n\t\tconst kvs = new Map();\n\t\tfor (const [key, [cls, qvar, type, es]] of this.#keyToUis) {\n\t\t\tif (type === 'select') {\n\t\t\t\tconst [sel] = es;\n\t\t\t\tif (sel && '' !== sel.value) {\n\t\t\t\t\tkvs.set(key, ['or', [sel.value], cls, qvar]);\n\t\t\t\t}\n\t\t\t} else if (type === 'checkbox') {\n\t\t\t\tconst [ena, rel, cbs] = es;\n\t\t\t\tif (cbs && ena && ena.checked) {\n\t\t\t\t\tconst oa = (rel && rel.checked) ? 'and' : 'or';\n\t\t\t\t\tkvs.set(key, [oa, this.#getCheckedVals(cbs), cls, qvar]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn kvs;\n\t}\n\n\t/**\n\t * Gets the array of checked values from a group of checkboxes.\n\t *\n\t * @private\n\t * @param cbs - Checkboxes to retrieve checked values from.\n\t * @returns Array of checked values.\n\t */\n\t#getCheckedVals(cbs: HTMLInputElement[]): string[] {\n\t\tconst vs: string[] = [];\n\t\tfor (const cb of cbs) {\n\t\t\tif (cb.checked) vs.push(cb.value);\n\t\t}\n\t\treturn vs;\n\t}\n\n\n\t// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\n\n\t/**\n\t * Gets the current state of filters from URL parameters and updates the filter accordingly.\n\t *\n\t * @private\n\t */\n\t#getStateFromUrlParams(): void {\n\t\tconst usp = new URLSearchParams(document.location.search);\n\n\t\tfor (const [_key, [_cls, qvar, type, es]] of this.#keyToUis) {\n\t\t\tif (!usp.has(qvar)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tlet v = usp.get(qvar) as string;\n\t\t\tlet oa = 'or';\n\t\t\tif (v.startsWith('.')) {\n\t\t\t\tv = v.substring(1);\n\t\t\t\toa = 'and';\n\t\t\t}\n\t\t\tif (type === 'select') {\n\t\t\t\tconst [sel] = es;\n\t\t\t\tsel.value = v;\n\t\t\t} else if (type === 'checkbox') {\n\t\t\t\tconst [ena, rel, cbs] = es;\n\t\t\t\tif (ena) ena.checked = true;\n\t\t\t\tif (rel) rel.checked = (oa === 'and');\n\t\t\t\tif (cbs) {\n\t\t\t\t\tconst vs = new Set(v.split(',').map(e => e.trim()));\n\t\t\t\t\tfor (const cb of cbs) {\n\t\t\t\t\t\tcb.checked = vs.has(cb.value);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Sets URL parameters based on the current state of filters.\n\t *\n\t * @private\n\t * @param keyToVals - Mapping of filter keys to their values.\n\t */\n\t#setUrlParams(keyToVals: KeyToVals): void {\n\t\tconst rs = { or: '', and: '.' };\n\t\tconst ps: string[] = [];\n\t\tfor (const [_key, [oa, vs, _cls, qvar]] of keyToVals) {\n\t\t\tif (vs.length) {\n\t\t\t\tps.push(`${qvar}=${rs[oa]}${vs.join(',')}`);\n\t\t\t}\n\t\t}\n\t\tlet url;\n\t\tif (ps.length > 0) {\n\t\t\turl = '?' + ps.join('&');\n\t\t} else {\n\t\t\turl = document.location.origin + document.location.pathname;\n\t\t}\n\t\thistory.replaceState('', '', url + document.location.hash);\n\t}\n\n\n\t// -------------------------------------------------------------------------\n\n\n\t/**\n\t * Initializes the list by assigning depth values to heading elements.\n\t *\n\t * @private\n\t * @param start - (Optional) Element that start initializing.\n\t */\n\t#initializeList(start: Element|null = null) {\n\t\tif (this.#doSetHeadingDepth) {\n\t\t\tif (!start) start = this.#listElm.firstElementChild;\n\n\t\t\tfor (let e = start; e; e = e?.nextElementSibling) {\n\t\t\t\tif (!(e instanceof HTMLHeadingElement)) continue;\n\t\t\t\te.dataset[this.#dsDepth] = String(parseInt(e.tagName[1]) - 1);\n\t\t\t}\n\t\t}\n\t}\n\n\n\t// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\n\n\t/**\n\t * Fixes the height of lists to prevent layout shifts.\n\t *\n\t * @private\n\t */\n\t#fixListHeight() {\n\t\tfor (const e of this.#listElm.children) {\n\t\t\tif (!(e instanceof HTMLOListElement || e instanceof HTMLUListElement)) continue;\n\t\t\te.setAttribute('style', `--height:${e.offsetHeight}px;`);\n\t\t}\n\t}\n\n\t/**\n\t * Frees the height of lists after filtering is complete.\n\t *\n\t * @private\n\t */\n\t#freeListHeight() {\n\t\tfor (const e of this.#listElm.children) {\n\t\t\tif (!(e instanceof HTMLOListElement || e instanceof HTMLUListElement)) continue;\n\t\t\te.removeAttribute('style');\n\t\t}\n\t}\n\n\n\t// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\n\n\t/**\n\t * Filter lists based on the provided key-value mapping.\n\t *\n\t * @private\n\t * @param keyToVals - Mapping of filter keys to their values\n\t * @param start - (Optional) Element that start filtering.\n\t */\n\t#filterLists(keyToVals: KeyToVals, start: Element|null = null): void {\n\t\tif (!start) start = this.#listElm.firstElementChild;\n\n\t\tfor (let e = start; e; e = e?.nextElementSibling) {\n\t\t\tif (!(e instanceof HTMLOListElement || e instanceof HTMLUListElement)) continue;\n\n\t\t\tlet count = 0;\n\t\t\tfor (const li of e.children) {\n\t\t\t\tif (li.tagName !== 'LI') continue;\n\n\t\t\t\tif (this.#isMatch(li, keyToVals)) {\n\t\t\t\t\tcount += 1;\n\t\t\t\t\tli.removeAttribute('hidden');\n\t\t\t\t} else {\n\t\t\t\t\tli.setAttribute('hidden', '');\n\t\t\t\t}\n\t\t\t}\n\t\t\te.dataset[this.#dsCount] = String(count);\n\t\t}\n\t}\n\n\t/**\n\t * Checks if a list item matches the provided filter values.\n\t *\n\t * @private\n\t * @param li - List item element.\n\t * @param keyToVals - Mapping of filter keys to their values.\n\t * @returns Whether the list item matches the filter values.\n\t */\n\t#isMatch(li: Element, keyToVals: KeyToVals): boolean {\n\t\tfor (const [_key, [oa, vs, cls]] of keyToVals) {\n\t\t\tif (!this.#isMatchOne(li, vs, cls, 'or' === oa)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Checks if a list item matches a single filter value.\n\t *\n\t * @private\n\t * @param li - List item element.\n\t * @param vs - Filter values.\n\t * @param cls - Class name pattern.\n\t * @param isOr - Whether it's an 'or' operation.\n\t * @returns Whether the list item matches the filter value.\n\t */\n\t#isMatchOne(li: Element, vs: string[], cls: string, isOr: boolean): boolean {\n\t\tif (isOr) {\n\t\t\tfor (const v of vs) {\n\t\t\t\tconst c = cls.replace('%value%', v).replace('_', '-');\n\t\t\t\tif (li.classList.contains(c)) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t} else {\n\t\t\tfor (const v of vs) {\n\t\t\t\tconst c = cls.replace('%value%', v).replace('_', '-');\n\t\t\t\tif (!li.classList.contains(c)) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\t}\n\n\n\t// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\n\n\t/**\n\t * Counts up the number of items under each heading and updates their visibility.\n\t *\n\t * @private\n\t * @param start - (Optional) Element that start counting up.\n\t */\n\t#countUpItems(start: Element|null = null): void {\n\t\tif (!start) start = this.#listElm.firstElementChild;\n\n\t\tfor (let e = start; e; e = e?.nextElementSibling) {\n\t\t\tif (e instanceof HTMLHeadingElement && e.dataset[this.#dsDepth]) {\n\t\t\t\te.dataset[this.#dsCount] = '0';\n\t\t\t}\n\t\t}\n\t\tconst hs: [HTMLElement, number][] = [];\n\t\tfor (let e = start?.previousElementSibling; e; e = e?.previousElementSibling) {\n\t\t\tif (e instanceof HTMLHeadingElement && e.dataset[this.#dsDepth]) {\n\t\t\t\tconst dp = parseInt(e.dataset[this.#dsDepth] ?? '');\n\t\t\t\tif (!hs.length || dp < hs[0][1]) {\n\t\t\t\t\ths.unshift([e, dp]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfor (let e = start; e; e = e?.nextElementSibling) {\n\t\t\tif (e instanceof HTMLHeadingElement && e.dataset[this.#dsDepth]) {\n\t\t\t\tconst dp = parseInt(e.dataset[this.#dsDepth] ?? '');\n\t\t\t\twhile (hs.length > 0) {\n\t\t\t\t\tif (dp > hs[hs.length - 1][1]) break;\n\t\t\t\t\ths.length -= 1;\n\t\t\t\t}\n\t\t\t\ths.push([e, dp]);\n\t\t\t} else if (e instanceof HTMLOListElement || e instanceof HTMLUListElement) {\n\t\t\t\tconst count = parseInt(e.dataset[this.#dsCount] ?? '');\n\t\t\t\tfor (const [h,] of hs) {\n\t\t\t\t\tconst sum = parseInt(h.dataset[this.#dsCount] ?? '') + count;\n\t\t\t\t\th.dataset[this.#dsCount] = String(sum);\n\t\t\t\t\tif (sum) {\n\t\t\t\t\t\th.removeAttribute('hidden');\n\t\t\t\t\t} else {\n\t\t\t\t\t\th.setAttribute('hidden', '');\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n"],
  "mappings": "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",
  "names": ["FilterCat", "#idx", "opts", "selFilter", "selList", "fs", "ls", "f", "l", "id", "#nonEmpty", "arr", "key", "v", "#selFilter", "#selList", "#selFilterKey", "#selFilterSelect", "#selFilterEnabled", "#selFilterRelation", "#selFilterValues", "#qvarBase", "#dsQvarBase", "#dsQvar", "#classBase", "#dsClassBase", "#dsKey", "#dsCount", "#dsDepth", "#doSetHeadingDepth", "#doInitializeByParams", "#doSupportDynamicAddition", "#listElm", "#keyToUis", "#stopUpdate", "#assignOptions", "#initializeList", "#initFilter", "mrs", "mr", "#updateAt", "filterElm", "fkElms", "#assignAttributes", "qvarBase", "rClsBase", "e", "qvar", "cls", "sel", "ena", "rel", "cbs", "_key", "_cls", "_qvar", "type", "es", "#assignEventListener", "#getStateFromUrlParams", "#update", "fk", "setIdFor", "s", "cb", "prefix", "suffix", "fe", "keyToVals", "#getKeyToVals", "#fixListHeight", "#filterLists", "#countUpItems", "#freeListHeight", "#setUrlParams", "start", "#isCheckedAtLeastOne", "#isCheckedAll", "kvs", "oa", "#getCheckedVals", "vs", "usp", "rs", "ps", "url", "count", "li", "#isMatch", "#isMatchOne", "isOr", "c", "hs", "dp", "h", "sum"]
}
